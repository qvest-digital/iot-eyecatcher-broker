// Automatically generated by MockGen. DO NOT EDIT!
// Source: ./broker/interfaces.go

package broker

import (
	gomock "github.com/golang/mock/gomock"
	time "time"
)

// Mock of Broker interface
type MockBroker struct {
	ctrl     *gomock.Controller
	recorder *_MockBrokerRecorder
}

// Recorder for MockBroker (not exported)
type _MockBrokerRecorder struct {
	mock *MockBroker
}

func NewMockBroker(ctrl *gomock.Controller) *MockBroker {
	mock := &MockBroker{ctrl: ctrl}
	mock.recorder = &_MockBrokerRecorder{mock}
	return mock
}

func (_m *MockBroker) EXPECT() *_MockBrokerRecorder {
	return _m.recorder
}

func (_m *MockBroker) Run() {
	_m.ctrl.Call(_m, "Run")
}

func (_mr *_MockBrokerRecorder) Run() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Run")
}

func (_m *MockBroker) Message(topic string, message []byte) {
	_m.ctrl.Call(_m, "Message", topic, message)
}

func (_mr *_MockBrokerRecorder) Message(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Message", arg0, arg1)
}

func (_m *MockBroker) LastMessage(topic string) ([]byte, error) {
	ret := _m.ctrl.Call(_m, "LastMessage", topic)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBrokerRecorder) LastMessage(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LastMessage", arg0)
}

// Mock of Topic interface
type MockTopic struct {
	ctrl     *gomock.Controller
	recorder *_MockTopicRecorder
}

// Recorder for MockTopic (not exported)
type _MockTopicRecorder struct {
	mock *MockTopic
}

func NewMockTopic(ctrl *gomock.Controller) *MockTopic {
	mock := &MockTopic{ctrl: ctrl}
	mock.recorder = &_MockTopicRecorder{mock}
	return mock
}

func (_m *MockTopic) EXPECT() *_MockTopicRecorder {
	return _m.recorder
}

func (_m *MockTopic) UpdateLastMessage(message []byte) time.Time {
	ret := _m.ctrl.Call(_m, "UpdateLastMessage", message)
	ret0, _ := ret[0].(time.Time)
	return ret0
}

func (_mr *_MockTopicRecorder) UpdateLastMessage(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateLastMessage", arg0)
}

func (_m *MockTopic) GetLastMessage() (time.Time, []byte) {
	ret := _m.ctrl.Call(_m, "GetLastMessage")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].([]byte)
	return ret0, ret1
}

func (_mr *_MockTopicRecorder) GetLastMessage() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetLastMessage")
}

// Mock of TopicList interface
type MockTopicList struct {
	ctrl     *gomock.Controller
	recorder *_MockTopicListRecorder
}

// Recorder for MockTopicList (not exported)
type _MockTopicListRecorder struct {
	mock *MockTopicList
}

func NewMockTopicList(ctrl *gomock.Controller) *MockTopicList {
	mock := &MockTopicList{ctrl: ctrl}
	mock.recorder = &_MockTopicListRecorder{mock}
	return mock
}

func (_m *MockTopicList) EXPECT() *_MockTopicListRecorder {
	return _m.recorder
}

func (_m *MockTopicList) UpdateTopic(topic string, message []byte) time.Time {
	ret := _m.ctrl.Call(_m, "UpdateTopic", topic, message)
	ret0, _ := ret[0].(time.Time)
	return ret0
}

func (_mr *_MockTopicListRecorder) UpdateTopic(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateTopic", arg0, arg1)
}

func (_m *MockTopicList) LastMessage(topic string) (time.Time, []byte) {
	ret := _m.ctrl.Call(_m, "LastMessage", topic)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].([]byte)
	return ret0, ret1
}

func (_mr *_MockTopicListRecorder) LastMessage(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LastMessage", arg0)
}
