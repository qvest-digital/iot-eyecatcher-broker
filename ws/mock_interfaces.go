// Automatically generated by MockGen. DO NOT EDIT!
// Source: ./ws/interfaces.go

package ws

import (
	gomock "github.com/golang/mock/gomock"
	io "io"
	net "net"
	time "time"
)

// Mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *_MockClientRecorder
}

// Recorder for MockClient (not exported)
type _MockClientRecorder struct {
	mock *MockClient
}

func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &_MockClientRecorder{mock}
	return mock
}

func (_m *MockClient) EXPECT() *_MockClientRecorder {
	return _m.recorder
}

func (_m *MockClient) Send() chan Message {
	ret := _m.ctrl.Call(_m, "Send")
	ret0, _ := ret[0].(chan Message)
	return ret0
}

func (_mr *_MockClientRecorder) Send() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Send")
}

func (_m *MockClient) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockClientRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockClient) RemoteAddr() string {
	ret := _m.ctrl.Call(_m, "RemoteAddr")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockClientRecorder) RemoteAddr() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoteAddr")
}

// Mock of Hub interface
type MockHub struct {
	ctrl     *gomock.Controller
	recorder *_MockHubRecorder
}

// Recorder for MockHub (not exported)
type _MockHubRecorder struct {
	mock *MockHub
}

func NewMockHub(ctrl *gomock.Controller) *MockHub {
	mock := &MockHub{ctrl: ctrl}
	mock.recorder = &_MockHubRecorder{mock}
	return mock
}

func (_m *MockHub) EXPECT() *_MockHubRecorder {
	return _m.recorder
}

func (_m *MockHub) Run() {
	_m.ctrl.Call(_m, "Run")
}

func (_mr *_MockHubRecorder) Run() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Run")
}

func (_m *MockHub) Unregister(c Client) {
	_m.ctrl.Call(_m, "Unregister", c)
}

func (_mr *_MockHubRecorder) Unregister(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Unregister", arg0)
}

func (_m *MockHub) Register(c Client) {
	_m.ctrl.Call(_m, "Register", c)
}

func (_mr *_MockHubRecorder) Register(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Register", arg0)
}

func (_m *MockHub) Broadcast(message Message) {
	_m.ctrl.Call(_m, "Broadcast", message)
}

func (_mr *_MockHubRecorder) Broadcast(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Broadcast", arg0)
}

// Mock of ConnI interface
type MockConnI struct {
	ctrl     *gomock.Controller
	recorder *_MockConnIRecorder
}

// Recorder for MockConnI (not exported)
type _MockConnIRecorder struct {
	mock *MockConnI
}

func NewMockConnI(ctrl *gomock.Controller) *MockConnI {
	mock := &MockConnI{ctrl: ctrl}
	mock.recorder = &_MockConnIRecorder{mock}
	return mock
}

func (_m *MockConnI) EXPECT() *_MockConnIRecorder {
	return _m.recorder
}

func (_m *MockConnI) RemoteAddr() net.Addr {
	ret := _m.ctrl.Call(_m, "RemoteAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

func (_mr *_MockConnIRecorder) RemoteAddr() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoteAddr")
}

func (_m *MockConnI) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockConnIRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockConnI) SetReadLimit(_param0 int64) {
	_m.ctrl.Call(_m, "SetReadLimit", _param0)
}

func (_mr *_MockConnIRecorder) SetReadLimit(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetReadLimit", arg0)
}

func (_m *MockConnI) SetReadDeadline(_param0 time.Time) error {
	ret := _m.ctrl.Call(_m, "SetReadDeadline", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockConnIRecorder) SetReadDeadline(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetReadDeadline", arg0)
}

func (_m *MockConnI) SetWriteDeadline(_param0 time.Time) error {
	ret := _m.ctrl.Call(_m, "SetWriteDeadline", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockConnIRecorder) SetWriteDeadline(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetWriteDeadline", arg0)
}

func (_m *MockConnI) SetPongHandler(_param0 func(string) error) {
	_m.ctrl.Call(_m, "SetPongHandler", _param0)
}

func (_mr *_MockConnIRecorder) SetPongHandler(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetPongHandler", arg0)
}

func (_m *MockConnI) ReadMessage() (int, []byte, error) {
	ret := _m.ctrl.Call(_m, "ReadMessage")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockConnIRecorder) ReadMessage() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReadMessage")
}

func (_m *MockConnI) WriteMessage(_param0 int, _param1 []byte) error {
	ret := _m.ctrl.Call(_m, "WriteMessage", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockConnIRecorder) WriteMessage(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WriteMessage", arg0, arg1)
}

func (_m *MockConnI) NextWriter(_param0 int) (io.WriteCloser, error) {
	ret := _m.ctrl.Call(_m, "NextWriter", _param0)
	ret0, _ := ret[0].(io.WriteCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockConnIRecorder) NextWriter(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NextWriter", arg0)
}
