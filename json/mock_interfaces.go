// Automatically generated by MockGen. DO NOT EDIT!
// Source: ./json/interfaces.go

package json

import (
	gomock "github.com/golang/mock/gomock"
	io "io"
	time "time"
)

// Mock of Marshaller interface
type MockMarshaller struct {
	ctrl     *gomock.Controller
	recorder *_MockMarshallerRecorder
}

// Recorder for MockMarshaller (not exported)
type _MockMarshallerRecorder struct {
	mock *MockMarshaller
}

func NewMockMarshaller(ctrl *gomock.Controller) *MockMarshaller {
	mock := &MockMarshaller{ctrl: ctrl}
	mock.recorder = &_MockMarshallerRecorder{mock}
	return mock
}

func (_m *MockMarshaller) EXPECT() *_MockMarshallerRecorder {
	return _m.recorder
}

func (_m *MockMarshaller) Marshal(topic string, timestamp time.Time, message []byte) ([]byte, error) {
	ret := _m.ctrl.Call(_m, "Marshal", topic, timestamp, message)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMarshallerRecorder) Marshal(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Marshal", arg0, arg1, arg2)
}

// Mock of TemplateI interface
type MockTemplateI struct {
	ctrl     *gomock.Controller
	recorder *_MockTemplateIRecorder
}

// Recorder for MockTemplateI (not exported)
type _MockTemplateIRecorder struct {
	mock *MockTemplateI
}

func NewMockTemplateI(ctrl *gomock.Controller) *MockTemplateI {
	mock := &MockTemplateI{ctrl: ctrl}
	mock.recorder = &_MockTemplateIRecorder{mock}
	return mock
}

func (_m *MockTemplateI) EXPECT() *_MockTemplateIRecorder {
	return _m.recorder
}

func (_m *MockTemplateI) Execute(_param0 io.Writer, _param1 interface{}) error {
	ret := _m.ctrl.Call(_m, "Execute", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTemplateIRecorder) Execute(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Execute", arg0, arg1)
}
